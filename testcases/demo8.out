	// Assign STATIC_AREA_ADDRESS to register "r0"
 	 loadI 1024 	=> r0 
	// Initialize ind. variable "i" at offset 0 with lower bound value 0
 	 loadI 0 	=> r1 
 	 add r0, r1 	=> r2 
//  	 loadI 0 	=> r5 	 --> r1
 	 loadI 9 	=> r6 
 	 store r1 	=> r2 
	// Generate control code for "FOR" 
L0:	 loadAI r0, 0 	=> r3 
 	 cmp_LE r3, r6 	=> r4
 	 cbr r4 	=> L1, L2
L1:	 nop 
	// Initialize ind. variable "j" at offset 4 with lower bound value 0
 	 loadI 4 	=> r7 
 	 add r0, r7 	=> r8 
 	 loadI 0 	=> r11 
 	 loadI 19 	=> r12 
 	 store r11 	=> r8 
	// Generate control code for "FOR" 
L3:	 loadAI r0, 4 	=> r9 
 	 cmp_LE r9, r12 	=> r10
 	 cbr r10 	=> L4, L5
L4:	 nop 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r13 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r14 
	// Load LHS value of array variable "y" with based address 8
 	 loadI 4 	=> r16 
 	 loadI 10 	=> r17 
 	 mult r17, r14 	=> r18 
 	 add r18, r13 	=> r19 
 	 mult r19, r16 	=> r20 
 	 loadI 8 	=> r21 
 	 add r21, r20 	=> r22 
 	 add r0, r22 	=> r15 
 	 loadI 1 	=> r23 
 	 store r23 	=> r15 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r24 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r25 
	// Load LHS value of array variable "y" with based address 8
 	 loadI 4 	=> r27 
 	 loadI 10 	=> r28 
 	 mult r28, r25 	=> r29 
 	 add r29, r24 	=> r30 
 	 mult r30, r27 	=> r31 
 	 loadI 8 	=> r32 
 	 add r32, r31 	=> r33 
 	 add r0, r33 	=> r26 
	// Load RHS value of variable "i" at offset 0
//  	 loadAI r0, 0 	=> r34 	 --> r24
	// Load RHS value of variable "j" at offset 4
//  	 loadAI r0, 4 	=> r35 	 --> r25
	// Load RHS value of array variable "y" with based address 8
//  	 loadI 4 	=> r37 	 --> r27
//  	 loadI 10 	=> r38 	 --> r28
//  	 mult r38, r35 	=> r39 	 --> r29
//  	 add r39, r34 	=> r40 	 --> r30
//  	 mult r40, r37 	=> r41 	 --> r31
//  	 loadI 8 	=> r42 	 --> r32
//  	 add r42, r41 	=> r43 	 --> r33
 	 loadAO r0, r33 	=> r36 
	// Load RHS value of variable "i" at offset 0
//  	 loadAI r0, 0 	=> r44 	 --> r24
	// Load RHS value of variable "j" at offset 4
//  	 loadAI r0, 4 	=> r45 	 --> r25
	// Load RHS value of array variable "y" with based address 8
//  	 loadI 4 	=> r47 	 --> r27
//  	 loadI 10 	=> r48 	 --> r28
//  	 mult r48, r45 	=> r49 	 --> r29
//  	 add r49, r44 	=> r50 	 --> r30
//  	 mult r50, r47 	=> r51 	 --> r31
//  	 loadI 8 	=> r52 	 --> r32
//  	 add r52, r51 	=> r53 	 --> r33
//  	 loadAO r0, r53 	=> r46 	 --> r36
 	 add r36, r36 	=> r54 
 	 store r54 	=> r26 
//  	 loadAI r0, 4 	=> r55 	 --> r25
 	 addI r25, 1 	=> r56 
 	 storeAI r56 	=> r0, 4 
 	 br L3
L5:	 nop 
//  	 loadAI r0, 0 	=> r57 	 --> r24
 	 addI r24, 1 	=> r58 
 	 storeAI r58 	=> r0, 0 
 	 br L0
L2:	 nop 
	// Initialize ind. variable "i" at offset 0 with lower bound value 0
 	 loadI 0 	=> r59 
 	 add r0, r59 	=> r60 
//  	 loadI 0 	=> r63 	 --> r59
 	 loadI 9 	=> r64 
 	 store r59 	=> r60 
	// Generate control code for "FOR" 
L6:	 loadAI r0, 0 	=> r61 
 	 cmp_LE r61, r64 	=> r62
 	 cbr r62 	=> L7, L8
L7:	 nop 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r65 
 	 loadI 1 	=> r66 
	// Load RHS value of array variable "y" with based address 8
 	 loadI 4 	=> r68 
 	 loadI 10 	=> r69 
 	 mult r69, r66 	=> r70 
 	 add r70, r65 	=> r71 
 	 mult r71, r68 	=> r72 
 	 loadI 8 	=> r73 
 	 add r73, r72 	=> r74 
 	 loadAO r0, r74 	=> r67 
	// Code for "WRITE"
 	 storeAI r67 	=> r0, 812 
 	 output 1836
//  	 loadAI r0, 0 	=> r75 	 --> r65
 	 addI r65, 1 	=> r76 
 	 storeAI r76 	=> r0, 0 
 	 br L6
L8:	 nop 
