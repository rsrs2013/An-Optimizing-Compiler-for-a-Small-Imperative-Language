	// Assign STATIC_AREA_ADDRESS to register "r0"
 	 loadI 1024 	=> r0 
	// Initialize ind. variable "i" at offset 0 with lower bound value 0
 	 loadI 0 	=> r1 
 	 add r0, r1 	=> r2 
 	 loadI 0 	=> r5 
 	 loadI 9 	=> r6 
 	 store r5 	=> r2 
	// Generate control code for "FOR" 
L0:	 loadAI r0, 0 	=> r3 
 	 cmp_LE r3, r6 	=> r4
 	 cbr r4 	=> L1, L2
L1:	 nop 
	// Initialize ind. variable "j" at offset 4 with lower bound value 0
 	 loadI 4 	=> r7 
 	 add r0, r7 	=> r8 
 	 loadI 0 	=> r11 
 	 loadI 19 	=> r12 
 	 store r11 	=> r8 
	// Generate control code for "FOR" 
L3:	 loadAI r0, 4 	=> r9 
 	 cmp_LE r9, r12 	=> r10
 	 cbr r10 	=> L4, L5
L4:	 nop 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r13 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r14 
	// Load LHS value of array variable "y" with based address 8
 	 loadI 4 	=> r16 
 	 loadI 10 	=> r17 
 	 mult r17, r14 	=> r18 
 	 add r18, r13 	=> r19 
 	 mult r19, r16 	=> r20 
 	 loadI 8 	=> r21 
 	 add r21, r20 	=> r22 
 	 add r0, r22 	=> r15 
 	 loadI 1 	=> r23 
 	 store r23 	=> r15 
 	 loadAI r0, 4 	=> r24 
 	 addI r24, 1 	=> r25 
 	 storeAI r25 	=> r0, 4 
 	 br L3
L5:	 nop 
 	 loadAI r0, 0 	=> r26 
 	 addI r26, 1 	=> r27 
 	 storeAI r27 	=> r0, 0 
 	 br L0
L2:	 nop 
	// Load LHS value of variable "sum" at offset 808
 	 loadI 808 	=> r28 
 	 add r0, r28 	=> r29 
 	 loadI 0 	=> r30 
 	 store r30 	=> r29 
	// Initialize ind. variable "i" at offset 0 with lower bound value 1
 	 loadI 0 	=> r31 
 	 add r0, r31 	=> r32 
 	 loadI 1 	=> r35 
 	 loadI 9 	=> r36 
 	 store r35 	=> r32 
	// Generate control code for "FOR" 
L6:	 loadAI r0, 0 	=> r33 
 	 cmp_LE r33, r36 	=> r34
 	 cbr r34 	=> L7, L8
L7:	 nop 
	// Initialize ind. variable "j" at offset 4 with lower bound value 0
 	 loadI 4 	=> r37 
 	 add r0, r37 	=> r38 
 	 loadI 0 	=> r41 
 	 loadI 19 	=> r42 
 	 store r41 	=> r38 
	// Generate control code for "FOR" 
L9:	 loadAI r0, 4 	=> r39 
 	 cmp_LE r39, r42 	=> r40
 	 cbr r40 	=> L10, L11
L10:	 nop 
	// Load LHS value of variable "sum" at offset 808
 	 loadI 808 	=> r43 
 	 add r0, r43 	=> r44 
	// Load RHS value of variable "sum" at offset 808
 	 loadAI r0, 808 	=> r45 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r46 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r47 
	// Load RHS value of array variable "y" with based address 8
 	 loadI 4 	=> r49 
 	 loadI 10 	=> r50 
 	 mult r50, r47 	=> r51 
 	 add r51, r46 	=> r52 
 	 mult r52, r49 	=> r53 
 	 loadI 8 	=> r54 
 	 add r54, r53 	=> r55 
 	 loadAO r0, r55 	=> r48 
 	 add r45, r48 	=> r56 
 	 store r56 	=> r44 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r57 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r58 
	// Load LHS value of array variable "y" with based address 8
 	 loadI 4 	=> r60 
 	 loadI 10 	=> r61 
 	 mult r61, r58 	=> r62 
 	 add r62, r57 	=> r63 
 	 mult r63, r60 	=> r64 
 	 loadI 8 	=> r65 
 	 add r65, r64 	=> r66 
 	 add r0, r66 	=> r59 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r67 
 	 loadI 1 	=> r68 
 	 sub r67, r68 	=> r69 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r70 
	// Load RHS value of array variable "y" with based address 8
 	 loadI 4 	=> r72 
 	 loadI 10 	=> r73 
 	 mult r73, r70 	=> r74 
 	 add r74, r69 	=> r75 
 	 mult r75, r72 	=> r76 
 	 loadI 8 	=> r77 
 	 add r77, r76 	=> r78 
 	 loadAO r0, r78 	=> r71 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r79 
	// Load RHS value of variable "j" at offset 4
 	 loadAI r0, 4 	=> r80 
	// Load RHS value of array variable "y" with based address 8
 	 loadI 4 	=> r82 
 	 loadI 10 	=> r83 
 	 mult r83, r80 	=> r84 
 	 add r84, r79 	=> r85 
 	 mult r85, r82 	=> r86 
 	 loadI 8 	=> r87 
 	 add r87, r86 	=> r88 
 	 loadAO r0, r88 	=> r81 
 	 add r71, r81 	=> r89 
 	 store r89 	=> r59 
 	 loadAI r0, 4 	=> r90 
 	 addI r90, 1 	=> r91 
 	 storeAI r91 	=> r0, 4 
 	 br L9
L11:	 nop 
 	 loadAI r0, 0 	=> r92 
 	 addI r92, 1 	=> r93 
 	 storeAI r93 	=> r0, 0 
 	 br L6
L8:	 nop 
	// Initialize ind. variable "i" at offset 0 with lower bound value 0
 	 loadI 0 	=> r94 
 	 add r0, r94 	=> r95 
 	 loadI 0 	=> r98 
 	 loadI 9 	=> r99 
 	 store r98 	=> r95 
	// Generate control code for "FOR" 
L12:	 loadAI r0, 0 	=> r96 
 	 cmp_LE r96, r99 	=> r97
 	 cbr r97 	=> L13, L14
L13:	 nop 
	// Load RHS value of variable "i" at offset 0
 	 loadAI r0, 0 	=> r100 
 	 loadI 1 	=> r101 
	// Load RHS value of array variable "y" with based address 8
 	 loadI 4 	=> r103 
 	 loadI 10 	=> r104 
 	 mult r104, r101 	=> r105 
 	 add r105, r100 	=> r106 
 	 mult r106, r103 	=> r107 
 	 loadI 8 	=> r108 
 	 add r108, r107 	=> r109 
 	 loadAO r0, r109 	=> r102 
	// Code for "WRITE"
 	 storeAI r102 	=> r0, 812 
 	 output 1836
 	 loadAI r0, 0 	=> r110 
 	 addI r110, 1 	=> r111 
 	 storeAI r111 	=> r0, 0 
 	 br L12
L14:	 nop 
	// Load RHS value of variable "sum" at offset 808
 	 loadAI r0, 808 	=> r112 
	// Code for "WRITE"
 	 storeAI r112 	=> r0, 816 
 	 output 1840
