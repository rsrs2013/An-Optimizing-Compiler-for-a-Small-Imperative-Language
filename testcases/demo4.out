	// Assign STATIC_AREA_ADDRESS to register "r0"
 	 loadI 1024 	=> r0 
	// Load LHS value of variable "a" at offset 0
 	 loadI 0 	=> r1 
 	 add r0, r1 	=> r2 
 	 loadI 1 	=> r3 
 	 store r3 	=> r2 
	// Load LHS value of variable "b" at offset 4
 	 loadI 4 	=> r4 
 	 add r0, r4 	=> r5 
 	 loadI 1 	=> r6 
 	 store r6 	=> r5 
	// Load LHS value of variable "c" at offset 8
 	 loadI 8 	=> r7 
 	 add r0, r7 	=> r8 
 	 loadI 0 	=> r9 
 	 store r9 	=> r8 
L0:	 nop 
	// Body of "REPEAT" construct starts here
	// Load LHS value of variable "a" at offset 0
 	 loadI 0 	=> r10 
 	 add r0, r10 	=> r11 
	// Load RHS value of variable "a" at offset 0
 	 loadAI r0, 0 	=> r12 
 	 loadI 2 	=> r13 
 	 add r12, r13 	=> r14 
 	 store r14 	=> r11 
	// Load RHS value of variable "a" at offset 0
 	 loadAI r0, 0 	=> r15 
	// Load RHS value of variable "b" at offset 4
 	 loadAI r0, 4 	=> r16 
 	 add r15, r16 	=> r17 
 	 loadI 10 	=> r18 
 	 cmp_LT r17, r18 	=> r19
 	 cbr r19 	=> L1, L2
L1:	 nop 
	// This is the "true" branch
	// Load LHS value of variable "b" at offset 4
 	 loadI 4 	=> r20 
 	 add r0, r20 	=> r21 
	// Load RHS value of variable "b" at offset 4
 	 loadAI r0, 4 	=> r22 
 	 loadI 1 	=> r23 
 	 add r22, r23 	=> r24 
 	 store r24 	=> r21 
	// Branch to statement following the "else" statement list
 	 br L3
L2:	 nop 
	// This is the "false" branch
	// Load LHS value of variable "b" at offset 4
 	 loadI 4 	=> r25 
 	 add r0, r25 	=> r26 
	// Load RHS value of variable "b" at offset 4
 	 loadAI r0, 4 	=> r27 
 	 loadI 2 	=> r28 
 	 add r27, r28 	=> r29 
 	 store r29 	=> r26 
	// Load LHS value of variable "c" at offset 8
 	 loadI 8 	=> r30 
 	 add r0, r30 	=> r31 
	// Load RHS value of variable "c" at offset 8
 	 loadAI r0, 8 	=> r32 
 	 loadI 1 	=> r33 
 	 add r32, r33 	=> r34 
 	 store r34 	=> r31 
L3:	 nop 
 	 loadI 10 	=> r35 
	// Load RHS value of variable "b" at offset 4
 	 loadAI r0, 4 	=> r36 
 	 cmp_LE r35, r36 	=> r37
 	 cbr r37 	=> L4, L5
	// Control code for "REPEAT UNTIL"
L5:	 br L0
L4:	 nop 
	// Load RHS value of variable "a" at offset 0
 	 loadAI r0, 0 	=> r38 
	// Code for "WRITE"
 	 storeAI r38 	=> r0, 12 
 	 output 1036
